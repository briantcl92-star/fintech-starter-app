// ===== SDK EXAMPLE =====
// for Crossmint SDK users
// wallet create SDK reference: https://docs.crossmint.com/sdk-reference/wallets/overview#transfer
import { CrossmintWallets, createCrossmint } from "@crossmint/wallets-sdk";

const crossmint = createCrossmint({
    apiKey: "<your-client-OR-server-api-key>", // ‚ö†Ô∏è Replace placeholder with actual key
    jwt: "<your-jwt>", // 
});

const crossmintWallets = CrossmintWallets.from(crossmint);

// ‚ö†Ô∏è COMMON ERROR: Invalid chain name - check docs for supported chains (e.g., "ethereum", "polygon")
// ‚ö†Ô∏è COMMON ERROR: Email format validation - ensure valid email syntax
const wallet = await crossmintWallets.getOrCreateWallet({
    chain: "<your-chain>", // ‚ö†Ô∏è Must be exact chain identifier (case-sensitive)
    signer: {
        type: "email", // ‚ö†Ô∏è Other types: "passkey", "phone", "external-wallet"
        email: "<your-email>", // 
    },
});

console.log(wallet.address); // ‚ö†Ô∏è May be undefined if wallet creation failed

// transaction create SDK reference: https://docs.crossmint.com/sdk-reference/wallets/overview#transfer
// ‚ö†Ô∏è COMMON ERROR: Invalid recipient address format (must match chain's address format)
// ‚ö†Ô∏è COMMON ERROR: Token symbol case-sensitivity ("USDC" vs "usdc")
// ‚ö†Ô∏è INSUFFICIENT BALANCE: Transaction fails if wallet lacks funds or gas
const transaction = await wallet.send(
    recipient, // ‚ö†Ô∏è Must be valid address for the specified chain
    "usdc",    // ‚ö†Ô∏è Token must exist on the chain and wallet must have balance
    "100"      // ‚ö†Ô∏è Amount in token units 
);

console.log(transaction.explorerLink); // 

// üí° BEST PRACTICE: Add error handling
// try {
//   const transaction = await wallet.send(recipient, "usdc", "100");
//   console.log(transaction.explorerLink);
// } catch (error) {
//   console.error("Transaction failed:", error.message);
//   // Handle specific errors: insufficient balance, invalid address, network issues
// }


# ===== API EXAMPLE =====
# for Crossmint API users
# wallet create API reference: https://docs.crossmint.com/api-reference/wallets/create-wallet
import requests

# ‚ö†Ô∏è ENVIRONMENT ERROR: Using staging URL - change to production for live apps
# Production URL: "https://www.crossmint.com/api/2025-06-09/wallets"
url = "https://staging.crossmint.com/api/2025-06-09/wallets"

payload = {
    # ‚ö†Ô∏è COMMON ERROR: Invalid chainType - must be "evm", "solana", or other supported types
    "chainType": "evm",
    
    # ‚ö†Ô∏è WALLET TYPE: "smart" enables gasless transactions but requires admin signer
    # Alternative: "custodial" (simpler) or "non-custodial" (user controls keys)
    "type": "smart",
    
    "config": { 
        "adminSigner": {
            # ‚ö†Ô∏è COMMON ERROR: Wrong signer type for use case
            # Types: "external-wallet", "passkey", "api-key", "email", "phone"
            "type": "external-wallet",
            
            # ‚ö†Ô∏è VALIDATION ERROR: Must be valid EVM address (0x... format, 42 chars)
            # ‚ö†Ô∏è SECURITY: This address has admin control over the wallet
            "address": "0x1234567890123456789012345678901234567890"
        } 
    },
    
    # ‚ö†Ô∏è OWNER FORMAT: Must be "email:user@example.com" or "phone:+1234567890"
    # ‚ö†Ô∏è COMMON ERROR: Missing prefix (email: or phone:) causes 400 error
    "owner": "email:user@example.com"
}

headers = {
    "X-API-KEY": "<x-api-key>",  # ‚ö†Ô∏è Replace with actual key
    "Content-Type": "application/json"
}

# ‚ö†Ô∏è NO ERROR HANDLING: Should check response.status_code before using data
response = requests.post(url, json=payload, headers=headers)

# ‚ö†Ô∏è JSON DECODE ERROR: Fails if response isn't valid JSON (e.g., 500 error HTML)
print(response.json())

# create transaction API reference: https://docs.crossmint.com/api-reference/wallets/create-transaction
import requests

# ‚ö†Ô∏è PATH PARAMETER: {walletLocator} must be replaced with actual wallet ID or address
# Format: wallet ID (UUID) OR "evm:0x..." OR "solana:..."
url = "https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions"

payload = { 
    "params": {
        # ‚ö†Ô∏è CRITICAL ERROR: "<string>" placeholder - must be actual transaction data
        # Format depends on chain: EVM (calldata), Solana (serialized transaction)
        # ‚ö†Ô∏è ENCODING: Must be hex-encoded for EVM, base64 for Solana
        "transaction": "<string>",
        
        # ‚ö†Ô∏è ARRAY FORMAT ERROR: Should be array of strings, not array of arrays
        # ‚ö†Ô∏è AUTHORIZATION: Must include signers with permission to execute transaction
        # ‚ö†Ô∏è SIGNER FORMAT: "type:identifier" (e.g., "email:user@example.com")
        "requiredSigners": [
            ["passkey:cWtP7gmZbd98HbKUuGXx5Q",  # ‚ö†Ô∏è This nested array is wrong
             "api-key:123456789", 
             "external-wallet:0x1234567890123456789012345678901234567890", 
             "email:test@example.com", 
             "phone:+1234567890"]
        ],
        
        # ‚ö†Ô∏è TYPE ERROR: Should be string, not array
        # ‚ö†Ô∏è PERMISSION ERROR: This signer must match one of requiredSigners
        # ‚ö†Ô∏è AUTHENTICATION: Signer must be authenticated via API key or JWT
        "signer": [
            "passkey:cWtP7gmZbd98HbKUuGXx5Q",  # ‚ö†Ô∏è This should not be an array
            "api-key:123456789", 
            "external-wallet:0x1234567890123456789012345678901234567890", 
            "email:test@example.com", 
            "phone:+1234567890"
        ]
    } 
}

# ‚ö†Ô∏è CORRECT FORMAT SHOULD BE:
# "requiredSigners": ["email:test@example.com"],  # Array of strings
# "signer": "email:test@example.com"              # Single string

headers = {
    "X-API-KEY": "<x-api-key>",  # ‚ö†Ô∏è Replace placeholder
    "Content-Type": "application/json"
}

response = requests.post(url, json=payload, headers=headers)
print(response.json())
